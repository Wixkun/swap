{% extends 'base.html.twig' %}

{% block body %}
<div class="min-h-screen flex items-center justify-center bg-gray-100 px-4">
    <div class="w-full max-w-md bg-white shadow-lg rounded-lg p-8">
        <h1 class="text-2xl font-bold text-gray-800 text-center mb-6">Créer un compte</h1>

        {% for message in app.flashes('success') %}
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
                {{ message }}
            </div>
        {% endfor %}

        {{ form_start(registrationForm, {'attr': {'class': 'space-y-4'}}) }}

            <div>
                <label for="firstName" class="block text-gray-700 font-semibold">Prénom</label>
                {{ form_widget(registrationForm.firstName, {'attr': {'class': 'w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black'}}) }}
            </div>

            <div>
                <label for="lastName" class="block text-gray-700 font-semibold">Nom</label>
                {{ form_widget(registrationForm.lastName, {'attr': {'class': 'w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black'}}) }}
            </div>

            <div>
                <label for="email" class="block text-gray-700 font-semibold">Email</label>
                {{ form_widget(registrationForm.email, {'attr': {'class': 'w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black'}}) }}
            </div>

            <div>
                <label for="password" class="block text-gray-700 font-semibold">Mot de passe</label>
                {{ form_widget(registrationForm.password, {'attr': {'class': 'w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black'}}) }}
            </div>

            <div>
                <label for="city" class="block text-gray-700 font-semibold">Ville</label>
                {{ form_widget(registrationForm.city, {
                    'attr': {
                        'class': 'w-full px-4 py-2 border border-gray-300 rounded-lg 
                                focus:outline-none focus:ring-2 focus:ring-black 
                                city-autocomplete-field'
                    }
                }) }}
                <ul id="city-suggestions" 
                    class="bg-white border border-gray-300 rounded-lg mt-1 
                        hidden absolute z-10 w-full max-h-60 overflow-auto">
                </ul>
            </div>
            <input type="hidden" id="citySelected" value="false">

        {{ form_end(registrationForm) }}

        <p class="text-gray-600 text-sm text-center mt-4">
            Déjà un compte ?
            <a href="{{ path('app_default') }}" class="text-black font-semibold hover:underline">Se connecter</a>
        </p>
    </div>
</div>
{% endblock %}
{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', () => {
    const passwordField = document.querySelector('#registration_form_password');
    const form = document.querySelector('form');

    form.addEventListener('submit', (event) => {
        const password = passwordField.value;
        const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/;

        if (!passwordRegex.test(password)) {
            event.preventDefault();
            alert('Le mot de passe doit contenir au moins 8 caractères, incluant des lettres et des chiffres.');
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    const cityField = document.querySelector('.city-autocomplete-field');
    const suggestionsList = document.getElementById('city-suggestions');
    const citySelected = document.getElementById('citySelected'); 
    const form = document.querySelector('form'); 

    function hideSuggestions() {
        suggestionsList.classList.add('hidden');
        suggestionsList.innerHTML = '';
    }

    document.addEventListener('click', (e) => {
        if (!suggestionsList.contains(e.target) && e.target !== cityField) {
            hideSuggestions();
        }
    });

    cityField.addEventListener('input', async () => {
        citySelected.value = "false";  
        const query = cityField.value.trim();

        if (query.length < 2) {
            hideSuggestions();
            return;
        }

        try {
            const response = await fetch(
                `https://geo.api.gouv.fr/communes?nom=${encodeURIComponent(query)}&limit=10&fields=nom`
            );
            if (!response.ok) {
                console.error('Erreur lors de l\'appel API');
                hideSuggestions();
                return;
            }

            const data = await response.json();

            if (!data || data.length === 0) {
                hideSuggestions();
                return;
            }

            suggestionsList.innerHTML = '';
            data.forEach(city => {
                const li = document.createElement('li');
                li.className = 'cursor-pointer hover:bg-gray-200 px-4 py-2';
                li.textContent = city.nom;

                li.addEventListener('click', () => {
                    cityField.value = city.nom;
                    citySelected.value = "true";
                    hideSuggestions();
                });

                suggestionsList.appendChild(li);
            });

            suggestionsList.classList.remove('hidden');

        } catch (error) {
            console.error('Erreur:', error);
            hideSuggestions();
        }
    });

    form.addEventListener('submit', (e) => {
        if (citySelected.value === "false") {
            e.preventDefault();
            alert("Veuillez sélectionner une ville dans la liste de suggestions.");
        }
    });
});
</script>
{% endblock %}
