{% extends 'base.html.twig' %}

{% block title %}Mon Profil{% endblock %}

{% block body %}
    <div class="container mx-auto p-6 max-w-2xl">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Mon Profil</h1>

        <div class="bg-white shadow-lg rounded-lg p-6">
            {{ form_start(profileForm, {'attr': {'class': 'space-y-4', 'id': 'profile-form'}}) }}
            <div>
                <label class="block text-gray-700 font-semibold mb-2">Email</label>
                {{ form_widget(profileForm.email) }}
            </div>

            <div>
                <label class="block text-gray-700 font-semibold mb-2">Nouveau mot de passe</label>
                {{ form_widget(profileForm.plainPassword) }}
            </div>

            <div id="agentContainer" {% if 'ROLE_AGENT' not in app.user.roles %}class="hidden"{% endif %}>
                <label class="block text-gray-700 font-semibold mb-2">Pseudo</label>
                {{ form_widget(profileForm.pseudoAgent) }}

                <label class="block text-gray-700 font-semibold mb-2 mt-3">Numéro de téléphone</label>
                {{ form_widget(profileForm.phoneAgent) }}
            </div>

            <div id="customerContainer" {% if 'ROLE_CUSTOMER' not in app.user.roles %}class="hidden"{% endif %}>
                <label class="block text-gray-700 font-semibold mb-2">Prénom</label>
                {{ form_widget(profileForm.firstNameCustomer) }}

                <label class="block text-gray-700 font-semibold mb-2 mt-3">Nom</label>
                {{ form_widget(profileForm.lastNameCustomer) }}

                <div class="relative" >
                    <label for="city" class="block text-gray-700 font-semibold">Ville</label>
                    {{ form_widget(profileForm.cityCustomer, {
                        'attr': {
                            'class': 'px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black city-autocomplete-field'
                        }
                    }) }}
                    <ul id="city-suggestions" class="bg-white border border-gray-300 rounded-lg mt-1 hidden absolute z-10 w-full max-h-60 overflow-auto"></ul>
                </div>
                <input type="hidden" id="citySelected" value="false">
            </div>



            <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow w-full">
                Sauvegarder
            </button>
            {{ form_end(profileForm) }}

            {% if agentSkillForm is not null %}
                <div class="mt-6 bg-white shadow-lg rounded-lg p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Mes Skills</h2>
                    {{ form_start(agentSkillForm, { attr: { class: 'flex flex-col gap-4' } }) }}
                    {{ form_widget(agentSkillForm) }}
                    <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow transition duration-300">
                        Enregistrer mes skills
                    </button>
                    {{ form_end(agentSkillForm) }}
                </div>
            {% endif %}

            <div class="mt-6">
                <form method="post" action="{{ path('app_profil_delete') }}" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.');">
                    <input type="hidden" name="_token" value="{{ csrf_token('delete_account') }}">
                    <button type="submit" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow">
                        Supprimer mon compte
                    </button>
                </form>
            </div>
        </div>

        {% if 'ROLE_CUSTOMER' in app.user.roles %}
            <div class="mb-6 p-4 border rounded bg-white">
                <h2 class="text-2xl font-semibold mb-2">Mes Tâches publiées</h2>
                {% if tasks is empty %}
                    <p>Aucune tâche publiée.</p>
                {% else %}
                    <div id="taskContainer">
                        {% for task in tasks %}
                            <article class="mb-6 p-4 border border-gray-200 rounded-md shadow-sm">
                                <div class="flex w-full flex-row justify-between items-center">
                                    <h3 class="text-xl font-bold mb-2">{{ task.title }}</h3>
                                    <div class="flex flex-row gap-2">
                                        <a href="{{ path('app_customer_task_edit', {'id': task.id, 'redirect': 'profil'}) }}">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </a>
                                        <form method="post" action="{{ path('app_customer_task_delete', {'id': task.id, 'redirect': 'profil'}) }}" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette tâche ?');">
                                            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ task.id) }}">
                                            <button type="submit">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                                </svg>
                                            </button>
                                        </form>
                                    </div>
                                </div>

                                {% if task.status %}
                                    <p class="text-sm text-gray-500 mb-2"><strong>Statut :</strong> {{ task.status }}</p>
                                {% endif %}

                                {% if task.description %}
                                    <p class="mb-2">{{ task.description }}</p>
                                {% endif %}

                                {% if task.imagePaths is not empty %}
                                    <div class="flex flex-wrap gap-4">
                                        {% for filename in task.imagePaths %}
                                            <img src="{{ asset('uploads/tasks/' ~ filename) }}" alt="{{ task.title }}" class="w-1/2 h-auto rounded shadow">
                                        {% endfor %}
                                    </div>
                                {% endif %}

                                <p class="text-sm text-gray-500 mt-2">
                                    {% if task.updatedAt != task.createdAt %}
                                        Mis à jour {{ task.updatedAt|ago }}
                                    {% else %}
                                        Créé {{ task.createdAt|ago }}
                                    {% endif %}
                                </p>
                            </article>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
        {% endif %}
    </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const passwordField = document.querySelector('#registration_form_password');
            const form = document.querySelector('form');
            if (passwordField && form) {
                form.addEventListener('submit', (event) => {
                    const password = passwordField.value;
                    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/;
                    if (!passwordRegex.test(password)) {
                        event.preventDefault();
                        alert('Le mot de passe doit contenir au moins 8 caractères, incluant des lettres et des chiffres.');
                    }
                });
            }

            const cityField = document.querySelector('.city-autocomplete-field');
            const suggestionsList = document.getElementById('city-suggestions');
            const citySelected = document.getElementById('citySelected');
            const profileForm = document.getElementById('profile-form');

            function hideSuggestions() {
                suggestionsList.classList.add('hidden');
                suggestionsList.innerHTML = '';
            }

            document.addEventListener('click', (e) => {
                if (!suggestionsList.contains(e.target) && e.target !== cityField) {
                    hideSuggestions();
                }
            });

            if (cityField) {
                cityField.addEventListener('input', async () => {
                    citySelected.value = "false";
                    const query = cityField.value.trim();

                    if (query.length < 2) {
                        hideSuggestions();
                        return;
                    }

                    try {
                        const response = await fetch(
                            `https://geo.api.gouv.fr/communes?nom=${encodeURIComponent(query)}&limit=10&fields=nom`
                        );
                        if (!response.ok) {
                            console.error('Erreur lors de l\'appel API');
                            hideSuggestions();
                            return;
                        }

                        const data = await response.json();
                        if (!data || data.length === 0) {
                            hideSuggestions();
                            return;
                        }

                        suggestionsList.innerHTML = '';
                        data.forEach(city => {
                            const li = document.createElement('li');
                            li.className = 'cursor-pointer hover:bg-gray-200 px-4 py-2';
                            li.textContent = city.nom;
                            li.addEventListener('click', () => {
                                cityField.value = city.nom;
                                citySelected.value = "true";
                                hideSuggestions();
                            });
                            suggestionsList.appendChild(li);
                        });
                        suggestionsList.classList.remove('hidden');
                    } catch (error) {
                        console.error('Erreur:', error);
                        hideSuggestions();
                    }
                });

                profileForm.addEventListener('submit', (e) => {
                    if (citySelected.value === "false") {
                        e.preventDefault();
                        alert("Veuillez sélectionner une ville dans la liste de suggestions.");
                    }
                });
            }
        });
    </script>
{% endblock %}
